Instalar o banco de dados com o comando  docker run --name revisao -e POSTGRESQL_USERNAME=admin -e POSTGRESQL_PASSWORD=admin -e POSTGRESQL_DATABASE=api_pets -p 5432:5432 bitnami/postgresql
Sendo que é necessário abrir o powershel como admin para colocar esse comando
Vale lembrar que o programa docker tem que estar aberto e com nenhum database ativo

Ir na pasta onde quer criar o projeto e digitar 
composer create-project laravel/laravel (nome do projeto)

Depois ir no arquivo .env e configurar o banco de dados que foi criado no primeiro comando

DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=api_pets
DB_USERNAME=admin
DB_PASSWORD=admin

Depois ir no arquivo database.php e alterar o codigo da linha 18 para o nome do banco de dados que é pgsql
    'default' => env('DB_CONNECTION', 'pgsql'),

Depois tem que fazer a configuração no dbeaver, para adicionar uma nova conexão, colocar o nome de usuario, senha, testar conexão...


Criar uma migration com o comando php artisan make:migration create_races_table
colocar todas as colunas que precisa para criar a tabela

Depois criar o model com o comando (sempre no singular)
$ php artisan make:model Race
No arquivo do model tem que passar o protected $fillable = ['name']; pois é ele que permite o que sera cadastrado no banco de dados

Criar o controller, cuida da parte logica do sistema de listar, cadastrar, atualizar...
$ php artisan make:controller RaceController

Para fazer get, post, update ou delete com o thunder cliente tem que subir o servidor, com isso o comando é php artisan serve

Criar uma pasta chamada Traits dentro da pasta app e criar um arquivo chamado HttpResponses.php com o codigo

<?php

namespace App\Traits;

use Illuminate\Contracts\Support\MessageBag;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Resources\Json\JsonResource;

trait HttpResponses
{

  public function response(string $message, string|int $status, array|Model|JsonResource $data = [])
  {
    return response()->json([
      'message' => $message,
      'status' => $status,
      'data' => $data
    ], $status);
  }

  public function error(string $message, string|int $status, array|MessageBag $errors = [], array $data = [])
  {
    return response()->json([
      'message' => $message,
      'status' => $status,
      'errors' => $errors,
      'data' => $data
    ], $status);
  }
}

isso é responsável por padronizar a resposta das mensagens

___________________________

Para criar uma seed, ou seja, popular os dados da tabela usa o comando. O arquivo fica em database/seeders

php artisan make:seed PopulateSpecies

Coloco o código que eu quero rodar e para executar esse codigo eu digito  php artisan db:seed --class=PopulateSpecies


_____________________________

Configurando email

vai nesse site https://mailtrap.io/inboxes
seleciona add inbox
Colocar um nome, adicionar e clicar no link que foi criado, vai abrir uma tela com as credenciais do email
No campo SMTP SETTINGS, ir no select de INTEGRATIONS e selecionar LARAVEL 9+
Aparecerá um código com as configurações menos a informação da senha, mas para ver a senha é só ir em Show Credentials

Copiar as credenciais, depois ir no projeto no vscode, abrir o arquivo .env, na linha 31 tem as credenciais do email
Alterar as informações
e em MAIL_ENCRYPTION=tls é para colocar tls
MAIL_FROM_ADDRESS="hello@example.com" vai o dominio da empresa, mas para teste pode deixar assim

agora tem que criar uma classe de email com o comando php artisan make:mail SendWelcomePet

CONFIGURANDO O MAIL GUN AULA 2 - SEMANA 9 TEMPO DE VIDEO 2H54MIN















